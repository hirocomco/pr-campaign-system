version: '3.8'

services:
  prcs_db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  prcs_redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  prcs_elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: always
    environment:
      - node.name=es01
      - cluster.name=pr-campaign-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  prcs_backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@prcs_db:5432/pr_campaign_system
      - TEST_DATABASE_URL=postgresql+asyncpg://postgres:postgres@prcs_db:5432/pr_campaign_system_test
      - REDIS_URL=redis://prcs_redis:6379
      - ELASTICSEARCH_URL=http://prcs_elasticsearch:9200
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      prcs_db:
        condition: service_healthy
      prcs_redis:
        condition: service_healthy
      prcs_elasticsearch:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  prcs_celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@prcs_db:5432/pr_campaign_system
      - TEST_DATABASE_URL=postgresql+asyncpg://postgres:postgres@prcs_db:5432/pr_campaign_system_test
      - REDIS_URL=redis://prcs_redis:6379
      - ELASTICSEARCH_URL=http://prcs_elasticsearch:9200
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      - prcs_db
      - prcs_redis
      - prcs_backend
    command: celery -A app.tasks.celery_app worker --loglevel=info

  prcs_celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@prcs_db:5432/pr_campaign_system
      - TEST_DATABASE_URL=postgresql+asyncpg://postgres:postgres@prcs_db:5432/pr_campaign_system_test
      - REDIS_URL=redis://prcs_redis:6379
      - ELASTICSEARCH_URL=http://prcs_elasticsearch:9200
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      - prcs_db
      - prcs_redis
      - prcs_backend
    command: celery -A app.tasks.celery_app beat --loglevel=info

  prcs_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - prcs_backend
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data: 