# ===========================================
# PR Campaign Ideation System - Environment Variables
# ===========================================

# Database Configuration
# Main application database - FIXED: Added port number
DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/pr_campaign_system

# Test database (separate database for running tests) - FIXED: Added port number  
TEST_DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/pr_campaign_system_test

# Redis Configuration
REDIS_URL=redis://localhost:6379/0

# Elasticsearch Configuration  
ELASTICSEARCH_URL=http://localhost:9200

# ===========================================
# AI/ML API Keys - You need at least one of these
# ===========================================

# OpenRouter (NEW - Recommended Primary AI Provider)
OPENROUTER_API_KEY=sk-or-your-openrouter-api-key-here

# Direct AI Provider Keys (Optional - For fallbacks)
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# ===========================================
# AI Provider Configuration (UPDATED)
# ===========================================
DEFAULT_AI_PROVIDER=openrouter
DEFAULT_AI_MODEL=anthropic/claude-3.5-sonnet
BACKUP_AI_MODEL=openai/gpt-4
OPENAI_MODEL=gpt-4
ANTHROPIC_MODEL=claude-3-5-sonnet-20241022
MAX_TOKENS_PER_REQUEST=2000
AI_TEMPERATURE=0.7

# ===========================================
# External Data Source APIs
# ===========================================

# News API (https://newsapi.org/)
NEWS_API_KEY=your_news_api_key_here

# Reddit API (https://www.reddit.com/dev/api/)
REDDIT_CLIENT_ID=your_reddit_client_id_here
REDDIT_CLIENT_SECRET=your_reddit_client_secret_here

# Google API (for Google Trends - optional)
GOOGLE_API_KEY=your_google_api_key_here

# ===========================================
# Security Configuration
# ===========================================

# JWT Configuration
SECRET_KEY=your_very_secret_key_here_min_32_characters_long
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# API Keys for client authentication (comma-separated)
VALID_API_KEYS=api_key_1,api_key_2,api_key_3

# ===========================================
# Email Configuration (for digest emails)
# ===========================================

# SMTP Settings
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password_here
FROM_EMAIL=noreply@yourcompany.com

# Digest Email Recipients (comma-separated)
DIGEST_RECIPIENTS=user1@company.com,user2@company.com

# ===========================================
# Application Configuration
# ===========================================

# Environment
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# Frontend Configuration
FRONTEND_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:8000

# ===========================================
# Performance & Caching
# ===========================================

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000

# Cache Configuration
CACHE_TTL_SECONDS=3600
TREND_CACHE_TTL_SECONDS=86400

# Celery Configuration
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# ===========================================
# Data Collection Settings
# ===========================================

# Trend Analysis
MAX_TRENDS_PER_SOURCE=50
MIN_TREND_SCORE=30.0
TREND_ANALYSIS_BATCH_SIZE=10

# Campaign Generation
MAX_CAMPAIGNS_PER_TREND=5
MIN_CAMPAIGN_SCORE=60.0
CAMPAIGN_GENERATION_TIMEOUT=120

# ===========================================
# Docker Configuration (FIXED - used by docker-compose)
# ===========================================

# PostgreSQL Database Names (FIXED)
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_HOST=prcs_db
POSTGRES_PORT=5432

# Redis Settings
REDIS_HOST=prcs_redis
REDIS_PORT=6379

# Elasticsearch Settings  
ELASTICSEARCH_HOST=prcs_elasticsearch
ELASTICSEARCH_PORT=9200

# ===========================================
# Test Database Information
# ===========================================
# The test database is automatically created by our init.sql script
# Both pr_campaign_system and pr_campaign_system_test databases
# are created when PostgreSQL container starts up
